<?xml version="1.0" encoding="UTF-8" ?><ChoregrapheProject xmlns="http://www.aldebaran-robotics.com/schema/choregraphe/project.xsd" xar_version="3"><Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s behavior. Highest level possible." x="0" y="0"><bitmap>media/images/box/root.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="ボックスBehaviorの終了時に信号を送る。" id="4" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="Show App" id="2" localization="8" tooltip="Loads the application on the tablet, if it exists, and displays the webview.&#x0A;&#x0A;V1.0.0&#x0A;" x="75" y="31"><bitmap>media/images/box/root.png</bitmap><script language="4"><content><![CDATA[

class MyClass(GeneratedClass):

    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.isRunning = False

    def onUnload(self):
        self.isRunning = False

    def _getTabletService(self):
        tabletService = None
        try:
            tabletService = self.session().service("ALTabletService")
        except Exception as e:
            self.logger.error(e)
        return tabletService

    def onInput_onStart(self):
        if self.isRunning:
            return # already running, nothing to do
        self.isRunning = True
        # We create TabletService here in order to avoid
        # problems with connections and disconnections of the tablet during the life of the application
        tabletService = self._getTabletService()
        appName = self.packageUid()
        state = False
        if appName:
            if tabletService:
                if tabletService.loadApplication(appName):
                    self.logger.info("Successfully set application: %s" % appName)
                    tabletService.showWebview()
                    state = True
                else:
                    self.logger.warning("Got tablet service, but failed to set application: %s" % appName)
            else:
                self.logger.warning("Couldn't find tablet service, so can't set application: %s" % appName)
        if state:
            self.onSuccess()
        else:
            self.onFailure()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Output name="onSuccess" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished successfully." id="3" /><Output name="onFailure" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished unsuccessfully." id="4" /></Box><Box name="Hide Web View" id="4" localization="8" tooltip="Hides the webview (html content) on the tablet, behind a generic cover&#x0A;&#x0A;V1.0.0&#x0A;" x="211" y="175"><bitmap>media/images/box/internet/internet.png</bitmap><script language="4"><content><![CDATA[

class MyClass(GeneratedClass):

    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        pass

    def _getTabletService(self):
        tabletService = None
        try:
            tabletService = self.session().service("ALTabletService")
        except Exception as e:
            self.logger.error(e)
        return tabletService

    def onInput_onStart(self):
        # We create TabletService here in order to avoid
        # problems with connections and disconnections of the tablet during the life of the application
        tabletService = self._getTabletService()
        if tabletService:
            tabletService.hideWebview()
        else:
            self.logger.warning("ALTabletService not found.")
        self.onStopped()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" /></Box><Box name="ChatUI" id="7" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="76" y="139"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[import sys, os
import shutil
import random

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.memory = ALProxy("ALMemory")
        self.tts = ALProxy("ALAnimatedSpeech")

        self.isPepperCanSay = True
        self.appFolder = ''

    def onLoad(self):
        #put initialization code here
        self.appFolder = self.behaviorAbsolutePath().replace(self.behaviorRelativePath(), "")

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):

        time.sleep(10)

        # チャットインターフェイスの初期化
        self.onInput_chatInit()

        ###
        ### サブスクライバの作成
        ###
        self.memory.subscribeToEvent("ssa-hw-say", self.getName(), "onHwSay")
        self.memory.subscribeToEvent("ssa-user-answer", self.getName(), "onUserAnswer")

        self.memory.subscribeToEvent("ssa-hw-debugmsg", self.getName(), "onHwDebugMsg")
        self.memory.subscribeToEvent("ssa-hw-init", self.getName(), "onHwInit")
        self.memory.subscribeToEvent("ssa-hw-imgshow", self.getName(), "onHwImgShow")

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box

    ###
    ### ハンドラ
    ###

    def onUserAnswer(self, key, value, message):
        '''
        タブレット側からの反応
        '''
        if(value == '終了'):
            self.onStopped()

    def onHwSay(self, key, value, message):
        '''
        会話ハンドラ
        '''
        self.logger.info('ssa-hw-say: ' + value)
        if(self.isPepperCanSay):
            self.isPepperCanSay = False
            self.outRecoStop()
            self.onInput_pepperSay(value)
            self.outRecoStart()
            self.isPepperCanSay = True
        else:
            self.logger.info('ssa-hw-say: cancelled')

    def onHwDebugMsg(self, key, value, message):
        self.onInput_chatDebug(value)

    def onHwInit(self, key, value, message):
        self.logger.info('[Event Controller] called onHwInit')
        self.onInput_chatInit()
        self.isPepperCanSay = True

    def onHwImgShow(self, key, value, message):
        self.onInput_chatImgShow(value)

    ###
    ### ハンドラ受け
    ###
    def onInput_pepperSay(self, msg):
        '''
        Pepper発話
        '''
        self.pepperChatBox(msg)
        self.tts.say('\\vct=130\\\\rspd=110\\' + msg)

    def onInput_userSay(self, msg):
        '''
        吹出し 会話（ユーザ）
        '''
        self.memory.raiseEvent('ssa/blow-user', msg)

    def pepperChatBox(self, msg):
        '''
        吹出し 会話（ペッパー）
        '''
        self.memory.raiseEvent('ssa/blow-pepper', msg)

    def onInput_chatDebug(self, msg):
        '''
        吹出し 会話Debugメッセージ
        '''
        self.memory.raiseEvent('ssa/blow-debug', msg)

    def onInput_chatImgShow(self, msg):
        '''
        吹出し 画像表示
        '''
        self.memory.raiseEvent('ssa/blow-imgshow', msg)

    def onInput_chatInit(self):
        '''
        吹出し 会話 初期化
        '''
        self.memory.raiseEvent('ssa/blow-clear', '')
        self.pepperChatBox('Chat.UIのサンプルです')
        self.memory.raiseEvent('ssa/blow-select', ['終了'])]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Input name="pepperSay" type="3" type_size="1" nature="1" inner="0" tooltip="" id="4" /><Input name="userSay" type="3" type_size="1" nature="1" inner="0" tooltip="" id="5" /><Input name="chatDebug" type="3" type_size="1" nature="1" inner="0" tooltip="" id="6" /><Input name="chatImgShow" type="3" type_size="1" nature="1" inner="0" tooltip="" id="7" /><Input name="chatInit" type="1" type_size="1" nature="1" inner="0" tooltip="" id="8" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="9" /></Box><Link inputowner="0" indexofinput="4" outputowner="4" indexofoutput="3" /><Link inputowner="4" indexofinput="2" outputowner="7" indexofoutput="9" /><Link inputowner="7" indexofinput="2" outputowner="2" indexofoutput="3" /><Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box></ChoregrapheProject>